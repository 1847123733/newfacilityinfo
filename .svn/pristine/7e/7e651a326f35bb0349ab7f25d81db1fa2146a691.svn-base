<template>
  <div class="app-container">
    <el-form :model="queryParams" ref="queryForm" :inline="true" v-show="showSearch" label-width="100px">
      <el-form-item label="产品名称" prop="deviceId">
<!--        <el-input-->
<!--          v-model="queryParams.deviceId"-->
<!--          placeholder="请选择产品名字"-->
<!--          clearable-->
<!--          size="small"-->
<!--          @keyup.enter.native="handleQuery"-->
<!--        />-->
        <el-select v-model="queryParams.deviceId" placeholder="请选择请选择产品名称" clearable>
          <el-option
            v-for="item in listProduct"
            :key="item.productId"
            :label="item.productName"
            :value="item.productId"
          />
        </el-select>
      </el-form-item>
      <el-form-item label="软件版本" prop="versionId">
<!--        <el-input-->
<!--          v-model="queryParams.versionId"-->
<!--          placeholder="请输入软件版本"-->
<!--          clearable-->
<!--          size="small"-->
<!--          @keyup.enter.native="handleQuery"-->
<!--        />-->

        <el-select v-model="queryParams.versionId" placeholder="请选择请选择软件版本" clearable>
          <el-option
            v-for="item in versionList"
            :key="item.index"
            :label="item.label"
            :value="item.index"
          />
        </el-select>
      </el-form-item>
      <el-form-item label="升级状态" prop="status">
        <el-select v-model="queryParams.status" placeholder="请选择升级状态" clearable size="small">
          <el-option label="请选择字典生成" value="" />
        </el-select>
      </el-form-item>
<!--      <el-form-item label="升级成功时间" prop="updateSuccessTime">-->
<!--        <el-date-picker clearable size="small" style="width: 200px"-->
<!--          v-model="queryParams.updateSuccessTime"-->
<!--          type="date"-->
<!--          value-format="yyyy-MM-dd"-->
<!--          placeholder="选择升级成功时间">-->
<!--        </el-date-picker>-->
<!--      </el-form-item>-->
      <el-form-item>
        <el-button type="cyan" icon="el-icon-search" size="mini" @click="handleQuery">搜索</el-button>
        <el-button icon="el-icon-refresh" size="mini" @click="resetQuery">重置</el-button>
      </el-form-item>
    </el-form>

    <el-row :gutter="10" class="mb8">
      <el-col :span="1.5">
        <el-button
          type="primary"
          icon="el-icon-plus"
          size="mini"
          @click="handleAdd"
          v-hasPermi="['manage:softwaredevicerelation:add']"
        >新增</el-button>
      </el-col>
<!--      <el-col :span="1.5">-->
<!--        <el-button-->
<!--          type="success"-->
<!--          icon="el-icon-edit"-->
<!--          size="mini"-->
<!--          :disabled="single"-->
<!--          @click="handleUpdate"-->
<!--          v-hasPermi="['manage:softwaredevicerelation:edit']"-->
<!--        >修改</el-button>-->
<!--      </el-col>-->
      <el-col :span="1.5">
        <el-button
          type="danger"
          icon="el-icon-delete"
          size="mini"
          :disabled="multiple"
          @click="handleDelete"
          v-hasPermi="['manage:softwaredevicerelation:remove']"
        >删除</el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button
          type="warning"
          icon="el-icon-download"
          size="mini"
          @click="handleExport"
          v-hasPermi="['manage:softwaredevicerelation:export']"
        >导出</el-button>
      </el-col>
	  <right-toolbar :showSearch.sync="showSearch" @queryTable="getList"></right-toolbar>
    </el-row>

    <el-table v-loading="loading" :data="softwaredevicerelationList" @selection-change="handleSelectionChange">
      <el-table-column type="selection" width="55" align="center" />
      <el-table-column label="设备名称" align="center" prop="deviceName" />
      <el-table-column label="软件版本名称" align="center" prop="versionName" />
      <el-table-column label="升级状态" align="center" prop="status" />
      <el-table-column label="升级成功时间" align="center" prop="updateSuccessTime" width="180">
        <template slot-scope="scope">
          <span>{{ parseTime(scope.row.updateSuccessTime, '{y}-{m}-{d}') }}</span>
        </template>
      </el-table-column>
      <el-table-column label="备注" align="center" prop="remark" />
      <el-table-column label="操作" align="center" class-name="small-padding fixed-width">
        <template slot-scope="scope">
<!--          <el-button-->
<!--            size="mini"-->
<!--            type="text"-->
<!--            icon="el-icon-edit"-->
<!--            @click="handleUpdate(scope.row)"-->
<!--            v-hasPermi="['manage:softwaredevicerelation:edit']"-->
<!--          >修改</el-button>-->
          <el-button
            size="mini"
            type="text"
            icon="el-icon-delete"
            @click="handleDelete(scope.row)"
            v-hasPermi="['manage:softwaredevicerelation:remove']"
          >删除</el-button>
        </template>
      </el-table-column>
    </el-table>

    <pagination
      v-show="total>0"
      :total="total"
      :page.sync="queryParams.pageNum"
      :limit.sync="queryParams.pageSize"
      @pagination="getList"
    />

    <!-- 添加或修改软件版本升级对应设备关系对话框 -->
    <el-dialog :title="title" :visible.sync="open" width="1500px" append-to-body>
    <!--  <el-form ref="form" :model="form" :rules="rules" label-width="80px">
        <el-form-item label="软件版本主键" prop="versionId">
          <el-input v-model="form.versionId" placeholder="请输入软件版本主键" />
        </el-form-item>
        <el-form-item label="设备主键" prop="deviceId">
          <el-input v-model="form.deviceId" placeholder="请输入设备主键" />
        </el-form-item>
        <el-form-item label="升级状态">
          <el-radio-group v-model="form.status">
            <el-radio label="1">请选择字典生成</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="升级成功时间" prop="updateSuccessTime">
          <el-date-picker clearable size="small" style="width: 200px"
            v-model="form.updateSuccessTime"
            type="date"
            value-format="yyyy-MM-dd"
            placeholder="选择升级成功时间">
          </el-date-picker>
        </el-form-item>
        <el-form-item label="备注" prop="remark">
          <el-input v-model="form.remark" type="textarea" placeholder="请输入内容" />
        </el-form-item>
      </el-form>-->
      <div>
        <el-form :model="queryParams1" ref="queryForm" :inline="true" v-show="showSearch" label-width="68px">
          <el-form-item label="投放地点" prop="putPointId">
            <el-select v-model="queryParams1.putPointId" filterable placeholder="请选择投放地点">
              <el-option
                v-for="item in addressList"
                :key="item.index"
                :label="item.label"
                :value="item.index">
              </el-option>
            </el-select>
          </el-form-item>

          <el-form-item>
            <el-button type="cyan" icon="el-icon-search" size="mini" @click="handleQuery">搜索</el-button>
            <el-button icon="el-icon-refresh" size="mini" @click="resetQuery">重置</el-button>
          </el-form-item>
        </el-form>
        <el-table v-loading="loading" :data="getDevicesBySoftwareList" @selection-change="handleSelectionChange" >
          <el-table-column type="selection" width="55" align="center" />
          <el-table-column label="序号" align="center" type="index"  />
          <el-table-column label="设备名字" align="center" prop="deviceName"   show-overflow-tooltip/>
          <el-table-column label="设备编号" align="center" prop="deviceCode"  show-overflow-tooltip />
          <el-table-column label="投放地点" align="center" prop="pointName"  show-overflow-tooltip/>
          <el-table-column label="负责人" align="center" prop="deviceManagerId" />
        </el-table>
      </div>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submitForm">确 定</el-button>
        <el-button @click="cancel">取 消</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import {  getDevicesBySoftwareId,getUpdateDevicesBySoftwareId, delSoftwaredevicerelation, addSoftwaredevicerelation,  exportSoftwaredevicerelation } from "@/api/manage/softwaredevicerelation";
import { listProduct } from "@/api/manage/product";
import { listVersion } from "@/api/manage/version";
import { listPutpoint } from "@/api/manage/putpoint";
export default {
  name: "Softwaredevicerelation",
  data() {
    const ids = this.$route.query.id
    const versionIds = this.$route.query.versionId
    return {
      // 遮罩层
      loading: true,
      // 选中数组
      ids: [],
      // 非单个禁用
      single: true,
      // 非多个禁用
      multiple: true,
      // 显示搜索条件
      showSearch: true,
      // 总条数
      total: 0,
      // 软件版本升级对应设备关系表格数据
      softwaredevicerelationList: [],
      //  根据固件id获取可以升级的设备列表
      getDevicesBySoftwareList:[],
      // 弹出层标题
      title: "",
      // 是否显示弹出层
      open: false,
      // 查询参数
      queryParams: {
        pageNum: 1,
        pageSize: 10,
        versionId: versionIds,
        deviceId: ids,
        status: null,
        updateSuccessTime: null,
      },
      queryParams1: {
        putPointId: null,
      },
      // 投放地点
      addressList:[],

      // 表单参数
      form: {},
      // 表单校验
      rules: {
      },
      // 产品id名称
      listProduct:[],
      // 软件版本
      versionList:[]
    };
  },
  created() {
    this.getList();
    this.getProduct();
    this.getListVersion();
    this.getDevicesBySoftware();
    this.getddList();
  },
  methods: {
    /** 查询软件版本升级对应设备关系列表 */
    getList() {
      this.loading = true;
      getUpdateDevicesBySoftwareId({
        softwareId:this.queryParams.versionId
      }).then(response => {
        console.log(response.rows)
        this.softwaredevicerelationList = response.rows;
        this.total = response.total;
        this.loading = false;
      });
    },
    /** 查询软件id对应可以升级的设备例表 */
    getDevicesBySoftware() {
      this.loading = true;
      getDevicesBySoftwareId({
        softwareId:this.queryParams.versionId
      }).then(response => {
        console.log(response.rows,'软件id对应可以升级的设备例表')
        this.getDevicesBySoftwareList = response.rows;
        // this.total = response.total;
        this.loading = false;
      });
    },
    /** 查询软件升级版本信息列表 */
    getProduct() {
      this.loading = true;
      listProduct().then(response => {

        this.listProduct = response.rows;
        console.log(this.listProduct,'产品信息')
        // this.total = response.total;
        this.loading = false;
      });
    },
    // 软件版本
    getListVersion() {
      this.loading = true;
      listVersion().then(response => {
        let obj = {
          label:null,
          index:null
        }
        for (let i =0 ; i<response.rows.length; i ++){
          obj = {
            label:null,
            index:null
          }
          obj.label = response.rows[i].versionName
          obj.index = response.rows[i].versionId
          this.versionList.push(obj)
        }
        // console.log(this.versionList,'软件版本')
        // this.versionList = response.rows;
        // this.total = response.total;
        this.loading = false;
      });
    },
    // 请求投放地点
    getddList() {
      this.loading = true;
      listPutpoint(this.queryParams1).then(response => {
        let obj = {};
        let arr = [];
        for (let i = 0; i < response.rows.length; i++){
          obj={};
          obj.index =  response.rows[i].putPointId;
          obj.label = response.rows[i].pointName;
          arr.push(obj);
        }
        this.addressList = arr;
        this.loading = false;
      });
    },

    // 取消按钮
    cancel() {
      this.open = false;
      this.reset();
    },
    // 表单重置
    reset() {
      this.form = {
        relationId: null,
        versionId: null,
        deviceId: null,
        status: "0",
        updateSuccessTime: null,
        createBy: null,
        createTime: null,
        updateBy: null,
        updateTime: null,
        remark: null
      };
      this.resetForm("form");
    },
    /** 搜索按钮操作 */
    handleQuery() {
      this.queryParams.pageNum = 1;
      this.getList();
    },
    /** 重置按钮操作 */
    resetQuery() {
      this.resetForm("queryForm");
      this.handleQuery();
    },
    // 多选框选中数据
    handleSelectionChange(selection) {
      this.ids = selection.map(item => item.relationId)
      this.single = selection.length!==1
      this.multiple = !selection.length
    },
    /** 新增按钮操作 */
    handleAdd() {
      this.reset();
      this.open = true;
      this.title = "添加软件版本升级对应设备关系";
    },

    /** 提交按钮 */
    submitForm() {
      this.$refs["form"].validate(valid => {
        if (valid) {
          if (this.form.relationId != null) {

          } else {
            addSoftwaredevicerelation(this.form).then(response => {
              this.msgSuccess("新增成功");
              this.open = false;
              this.getList();
            });
          }
        }
      });
    },
    /** 删除按钮操作 */
    handleDelete(row) {
      const relationIds = row.relationId || this.ids;
      this.$confirm('是否确认删除软件版本升级对应设备关系编号为"' + relationIds + '"的数据项?', "警告", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        }).then(function() {
          return delSoftwaredevicerelation(relationIds);
        }).then(() => {
          this.getList();
          this.msgSuccess("删除成功");
        })
    },
    /** 导出按钮操作 */
    handleExport() {
      const queryParams = this.queryParams;
      this.$confirm('是否确认导出所有软件版本升级对应设备关系数据项?', "警告", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        }).then(function() {
          return exportSoftwaredevicerelation(queryParams);
        }).then(response => {
          this.download(response.msg);
        })
    }
  }
};
</script>
